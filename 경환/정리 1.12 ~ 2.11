1.12 쓰레드 풀링
쓰레드는 몇개 만드는게 좋을까요? 쓰래드를 많이 만들면 처리하긴 편하겟지만 오버헤드가 크다.
그렇기 때문에 쓰레드 풀링 방식을 통해서 문제를 해결한다.
쓰레드 풀링 : 쉬고있는 쓰레드에서 일처리하도록 한다.
cpu 코어 수와 쓰레드 갯수와의 관계
cpu 코어 수보다 쓰레드 갯수가 작으면 놀고있는 cpu가 생김
cpu 코어 수보다 쓰레드 갯수가 크면 cpu가 더많은 갯수의 쓰레드를 처리해서 스위칭 비용발생
cpu 코어 수보다 쓰레드 갯수가 같다면 쓰레드는 종종 자는데 그 동안 cpu놀고있음

결국 cpu 코어 수보다 쓰레드 갯수보다 큰게 좋지만 적정선을 찾아야함 ㅎ

1.13 이벤트
멀티쓰레드 공유자원 사용 이슈 해결방법중 이벤트 방법이 있음

1.14 세마포어
원하는 개수의 스레드가 자원을 액세스 가능하도록 함
세마포어를 한개만 사용한다면 뮤텍스와 다를게 없음
이벤트 방식과 달리
release를 하면 상태값이 하나 올라가기 때문에
원하는 수만큼 wait을 풀수 있는 장점이 있음

1.15 원자 조작
임계영역 잠금 없이도 여러 쓰레드에서 안전하게 접근 가능하게 하는 기능

1.16 멀티스레드 프로그래밍의 흔한 실수들
1. 읽기에 락안걸기
2. 잠금 순서 꼬여서 데드락
3. 적당한 잠금범위 : 범위가 길면 멀티쓰레드 의미가 없고 너무 좁으면 유지보수 측면에서 별로임
4. 디바이스 타임이 섞인 잠금 : 로그나 콘솔출력같은 다른 디바이스 접근시에는 락걸면 안됨
5. 잠금의 전염성으로 발생한 실수 : 락으로 가져온 변수들을 락밖에서 변경하면안됨
6. 잠금된 뮤텍스나 임계영역 삭제 : 락중인데 락변수 삭제
7. 일관성 규칙 깨기 : 일관성 필요한 변수들은 따로 락을 잡아서 일관성이 깨지게함

2.1 컴퓨터 네트워크를 구성하는 기기

단말기 : 클라이언트 / 서버
직접 연결 : 기본적인 형태
링 위상 : 돌아가면서 전달
네트워크 기기를 사이에 둔 구성 : 단말기 사이에 스위치라는 기기가 있음, 별의 위상
기기간의 통신규약만 지키면 통신 가능 : OSI모델

2.1.2 OSI모델
1. 물리계층
하드웨어
2. 데이터 링크
로컬 지역 네트워크 통신 (LAN)
3. 네트워크
광역통신망 WAN
4. 전송 계층
상대방에게 반드시 가도록 한다.
5 6 7
세션 표현 응용
운영체제 모듈과 통신을 하는 동안 논리적 연결 단위나 기능들을 한다.

2.1.3  OSI모델 계층2
1. 단말기 고유 주소를 갖는다.
2. frame단위로 데이터를 주고 받는다.
frame : 헤더(수신, 송신 정보)와 페이로드(내용)가 합쳐진 결과물

2.1.4 OSI모델 계층3
데이터 전달을 위해서 중간단계를 거쳐 거쳐 전달함
라우터 : LAN 사이에 통신을 할 수 있게 해줌
IP : 인터넷 프로토콜 -> 주소형식인 8비트 숫자 4개로 구성되어있음
다른 단말기로 데이터를 보내기위해 인터넷 프로토콜에 의해 IP 패킷 형태로 포장됨

2.2 인터넷
IP 규약만 지키면 종류와 상관없이 통신 가능

2.3 컴퓨터 네트워크 데이터
프레임과 패킷은 직접다루지 않음
보통 스트림과 메세지를 주로 다룸

2.3.1 스트림 형식
스트림 : 데이터 흐름 -> 한쪽에서 다른쪽으로 보내는 연결된 데이터 흐름 하나

송신 횟수와 수신 횟수가 다를 수 있음
TCP 프로토콜이 이러한 성질을 가지고 있음
그렇기 때문에 크기든 시작과 끝을 알리는 기호든 추가해야 데이터 파악 가능
전자는 헤더를 붙이는 방식 / 후자는ㄴ 구분자를 이용하는 방식

2.3.2 메세지 형식
스트림 방식과 달리 자체적으로 구분 가능
보낸 갯수와 받는 갯수가 같음
IP 패킷에는 주고받는 데이터 즉 페이로드 크기 / 송신자 주소 / 수신자 주소 / 체크섬이 있습니다.
IP 패킷은 크기 제한이 있지만 운영체제와 네트워크 모듈 네트워크 스택에서 IP패킷의 크기제한에 맞추어
여러 조각을 내기때문에 신경쓸 필요없음
이렇게 조각내는 현상이 단편화임

2.4 컴퓨터 네트워크 식별자
IP주소 형식 
IPv4은 1바이트 숫자 4개 조합으로 32비트임
IPv4 주소의 한계를 극복하기 위해 IPv6가 나옴
IPv6은 2바이트 수자 8개로 16바이트 크기임 2^128개 주소 지정 가능
IPv4 와 IPv6은 호환안됨
포트 : 단말기 안에서도 여러 프로세스가 돌아가고 있는데 이중에 누구한테 보낼것인지
영단어 형식의 호스트 이름을 DNS서버에 물어보면 숫자인 IP주소로 알려줌
심지어 한번 알려준 IP주소는 몇일동안 보관하고 물어보면 바로 알려줌

2.5 컴퓨터 네트워크의 품질과 특성
2.5.1 네트워트 품질 저해 요소
1. 너무 패킷이 많으면 버린다.
: 속도가 느려지는건 리스크가 너무 크니 버려서 속도를 더 챙긴다.
2. 너무 패킷이 많으면 메모리에 패킷을 누적한다.
: 장시간 지속되면 멈춰버릴 수도 있기 떄문에 재부팅 시켜버리는 경우도 있다.

물리계층 문제로도 신호가 유실될 수 있음
데이터에 잡음이 생기면 버려지고 유실이 생긴다.

패킷유실이나 드롭 비율이 높을 수록 네트워크 품질이 나쁘다고 할 수 있음

2.5.2 전송 속도와 전송 지연시간
송신자와 수신자 간 네트워크 기기 안 하드웨어와 소프트웨어의 처리속도로
네트워크 레이턴시의 원인이 됨

2.5.3 네트워크 품질 기준 세 가지
- 전송 속도
- 패킷 유실률
- 레이턴시

2.5.4 무선네트워크의 품질

2.6 컴퓨터 네트워크에서 데이터 보내기와 받기
2.6.1 UDP
데이터 그램을 보내는데 데이터 그램은 메세지 성질을가져서 뭉치거나 쪼개지지 않음
데이터 유실 발생시 데이터 그램을 못받거나 중복으로 받을 가능성이 있으나
내용이 훼손되는 경우는 드뭄 그래서 받는쪽에서 유실이나 뒤바뀜 중복수신하여도
괜찮을때 UDP를 사용함 ex) 동영상 음성데이터
게임에서는 캐릭터 위치 

2.6.2 TCP
보내는 데이터와 받는 데이터가 완전 같은걸 보장해주는 프로토콜
UDP와 다르게 연결과정이 필요하다.
TCP는 스트림 형태이다.
데이터를 받으면 ack보내서 확인받아서 데이터를 모두 받을 수 있도록 보장한다.

2.7 패킷 유실시 UDP TCP에서의 현상
TCP는 일정시간 동안 ack 을못보내면 다시 보내기 때문에 유실시 그만큼 레이턴시가 생긴다.
UDP는 그런 레이턴시가 없지만 부적확 하다.

2.8 주로 사용하는 메세지 형식
메타데이터 를 이용하면 나중에 클라 호환이 편하다. 해커한텐 좀더 취약해 지겠지만

2.9 네트워크 주소 변환
NAT 라우터에서 새로 주소를 매핑해서 전달함
라우터에서 새로 주소를 만들어서 연결 매핑하는 것 : 포트 매핑 엔트리
내부주소 (원래 주소) / 외부주소 (밖으로 전달할떄 주소) 
이렇게 만들어가는 과정을 홀펀칭이라고 함

2.10 요약
2.11 패스
